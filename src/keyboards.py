import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from database import get_active_checkin, get_spots, get_favorite_spots

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def get_main_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: start.py, checkin.py, profile.py, spots.py, weather.py (—á–µ—Ä–µ–∑ back_to_menu).
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    logger.debug(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã
    buttons = [
        [InlineKeyboardButton(text="üìç –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —Å–ø–æ—Ç–µ", callback_data="checkin")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫-–∏–Ω
    active_checkin = await get_active_checkin(user_id)
    if active_checkin:
        if active_checkin["checkin_type"] == 1:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —Å–ø–æ—Ç–µ
            buttons.append([InlineKeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç—å —Å–ø–æ—Ç", callback_data="uncheckin")])
        elif active_checkin["checkin_type"] == 2:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –ø—Ä–∏–µ–∑–¥
            buttons.append([InlineKeyboardButton(text="‚úÖ –Ø –ø—Ä–∏–µ—Ö–∞–ª", callback_data="confirm_arrival")])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–æ—Ç—ã –≤ –±–∞–∑–µ, –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    spots = await get_spots()
    if spots:
        buttons.append([InlineKeyboardButton(text="üîç –ö—Ç–æ –Ω–∞ —Å–ø–æ—Ç–∞—Ö", callback_data="nearby_spots")])
        buttons.append([InlineKeyboardButton(text="üå§Ô∏è –ë–ª–∏–∂–∞–π—à–∏–µ —Å–ø–æ—Ç—ã", callback_data="weather_nearby_spots")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –≥–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {buttons}")
    return keyboard

def create_spot_keyboard(spots: list, is_admin: bool) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ø–æ—Ç–æ–≤, —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: checkin.py.
    
    Args:
        spots (list): –°–ø–∏—Å–æ–∫ —Å–ø–æ—Ç–æ–≤.
        is_admin (bool): –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ø–æ—Ç–æ–≤.
    """
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ø–æ—Ç–æ–≤, is_admin={is_admin}")
    keyboard = []
    for spot in spots:
        spot_buttons = [InlineKeyboardButton(text=spot["name"], callback_data=f"spot_{spot['id']}")]
        if is_admin:
            spot_buttons.append(InlineKeyboardButton(text="‚úèÔ∏è", callback_data=f"edit_spot_{spot['id']}"))
            spot_buttons.append(InlineKeyboardButton(text="üóëÔ∏è", callback_data=f"delete_spot_{spot['id']}"))
        keyboard.append(spot_buttons)
    keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–æ—Ç", callback_data="add_spot")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–æ—Ç–æ–≤: {keyboard}")
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_checkin_type_keyboard(spot_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —á–µ–∫-–∏–Ω–∞.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: checkin.py.
    
    Args:
        spot_id (int): ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Ç–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ —á–µ–∫-–∏–Ω–∞.
    """
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —á–µ–∫-–∏–Ω–∞ —Å spot_id={spot_id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–Ø –Ω–∞ —Å–ø–æ—Ç–µ", callback_data="checkin_type_1")],
        [InlineKeyboardButton(text="–ü–ª–∞–Ω–∏—Ä—É—é –ø—Ä–∏–µ—Ö–∞—Ç—å", callback_data=f"plan_to_arrive_{spot_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_checkin")]
    ])
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —á–µ–∫-–∏–Ω–∞: {keyboard.inline_keyboard}")
    return keyboard

def create_duration_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: checkin.py.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 —á–∞—Å", callback_data="duration_1"),
         InlineKeyboardButton(text="2 —á–∞—Å–∞", callback_data="duration_2"),
         InlineKeyboardButton(text="3 —á–∞—Å–∞", callback_data="duration_3")],
        [InlineKeyboardButton(text="4 —á–∞—Å–∞", callback_data="duration_4"),
         InlineKeyboardButton(text="5 —á–∞—Å–æ–≤", callback_data="duration_5"),
         InlineKeyboardButton(text="6 —á–∞—Å–æ–≤", callback_data="duration_6")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_checkin")]
    ])
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {keyboard.inline_keyboard}")
    return keyboard

def create_arrival_time_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: checkin.py, spots.py, weather.py.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è.
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 1 —á–∞—Å", callback_data="arrival_1"),
         InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞", callback_data="arrival_2"),
         InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞", callback_data="arrival_3")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_checkin")]
    ])
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è: {keyboard.inline_keyboard}")
    return keyboard

def create_arrival_confirmation_keyboard(checkin_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: checkin.py.
    
    Args:
        checkin_id (int): ID —á–µ–∫-–∏–Ω–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–∏–±—ã—Ç–∏—è.
    """
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è –¥–ª—è checkin_id={checkin_id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –Ω–∞ –º–µ—Å—Ç–µ", callback_data=f"late_arrival_confirm_{checkin_id}")],
        [InlineKeyboardButton(text="üö™ –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_late_arrival_{checkin_id}")]
    ])
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è: {keyboard.inline_keyboard}")
    return keyboard

def create_location_request_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: checkin.py, spots.py, weather.py.
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
    return keyboard

def create_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: checkin.py, spots.py, profile.py, weather.py.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é".
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {keyboard.inline_keyboard}")
    return keyboard

def create_confirm_delete_keyboard(spot_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ç–∞.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: checkin.py.
    
    Args:
        spot_id (int): ID —Å–ø–æ—Ç–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è spot_id={spot_id}")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{spot_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
        ]
    )
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {keyboard.inline_keyboard}")
    return keyboard

def create_checkin_new_spot_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–µ–∫-–∏–Ω–∞ –Ω–∞ –Ω–æ–≤–æ–º —Å–ø–æ—Ç–µ.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: checkin.py.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —á–µ–∫-–∏–Ω–∞ –Ω–∞ –Ω–æ–≤–æ–º —Å–ø–æ—Ç–µ.
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —á–µ–∫-–∏–Ω–∞ –Ω–∞ –Ω–æ–≤–æ–º —Å–ø–æ—Ç–µ")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è —Å–µ–π—á–∞—Å", callback_data="checkin_new_spot")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —á–µ–∫-–∏–Ω–∞ –Ω–∞ –Ω–æ–≤–æ–º —Å–ø–æ—Ç–µ: {keyboard.inline_keyboard}")
    return keyboard

def create_uncheckin_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑—á–µ–∫–∏–Ω–∞.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: checkin.py.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑—á–µ–∫–∏–Ω–∞.
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑—á–µ–∫–∏–Ω–∞")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç—å —Å–ø–æ—Ç", callback_data="uncheckin")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑—á–µ–∫–∏–Ω–∞: {keyboard.inline_keyboard}")
    return keyboard

def create_confirm_arrival_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: checkin.py, spots.py, weather.py.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è.
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–Ø –ø—Ä–∏–µ—Ö–∞–ª!", callback_data="confirm_arrival")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è: {keyboard.inline_keyboard}")
    return keyboard

def create_nearby_spots_keyboard(spots: list) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ç–æ–≤.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: spots.py.
    
    Args:
        spots (list): –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (spot, distance) —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Ç–∞–º–∏.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–µ–∑–¥–∞.
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ç–æ–≤")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üèÑ‚Äç‚ôÇÔ∏è –°–æ–±–∏—Ä–∞—é—Å—å –Ω–∞ {spot['name']}", callback_data=f"plan_to_arrive_{spot['id']}")]
            for spot, distance in spots
        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
    )
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ç–æ–≤: {keyboard.inline_keyboard}")
    return keyboard

async def create_favorite_spots_keyboard(user_id: int, spots: list) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ø–æ—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: profile.py.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        spots (list): –°–ø–∏—Å–æ–∫ —Å–ø–æ—Ç–æ–≤.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ø–æ—Ç–∞–º–∏.
    """
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    keyboard = []
    favorite_spots = await get_favorite_spots(user_id)
    favorite_spot_ids = set(favorite_spots)

    for spot in spots:
        spot_id = spot["id"]
        if spot_id in favorite_spot_ids:
            button_text = f"{spot['name']} (—É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ)"
            callback_data = f"remove_favorite_{spot_id}"
        else:
            button_text = f"{spot['name']} (–¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ)"
            callback_data = f"add_favorite_{spot_id}"
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–æ—Ç–æ–≤: {keyboard.inline_keyboard}")
    return keyboard

def create_profile_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: profile.py.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è.
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚≠ê –£–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ø–æ—Ç–∞–º–∏", callback_data="manage_favorites")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è: {keyboard.inline_keyboard}")
    return keyboard

def create_back_to_profile_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: profile.py.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å".
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")]
        ]
    )
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å: {keyboard.inline_keyboard}")
    return keyboard

def create_weather_spots_keyboard(spots: list) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ø–æ—Ç–æ–≤ —Å –ø–æ–≥–æ–¥–æ–π.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: weather.py.
    
    Args:
        spots (list): –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (spot, distance) —Å –±–ª–∏–∂–∞–π—à–∏–º–∏ —Å–ø–æ—Ç–∞–º–∏.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–µ–∑–¥–∞.
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ø–æ—Ç–æ–≤ —Å –ø–æ–≥–æ–¥–æ–π")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üèÑ‚Äç‚ôÇÔ∏è –°–æ–±–∏—Ä–∞—é—Å—å –Ω–∞ {spot['name']}", callback_data=f"plan_to_arrive_{spot['id']}")]
            for spot, distance in spots
        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
    )
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ø–æ—Ç–æ–≤ —Å –ø–æ–≥–æ–¥–æ–π: {keyboard.inline_keyboard}")
    return keyboard