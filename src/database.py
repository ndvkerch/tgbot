import sqlite3
import logging
import os
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

DB_PATH = "data/database.db"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É—Ç—å –∫ –ë–î
if not os.path.exists(DB_PATH):
    logging.warning(f"‚ö†Ô∏è –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {DB_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –í –Ω–∞—á–∞–ª–æ database.py –¥–æ–±–∞–≤–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
def init_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            # –¢–∞–±–ª–∏—Ü–∞ users
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                first_name TEXT,
                last_name TEXT,
                username TEXT,
                is_admin BOOLEAN NOT NULL DEFAULT 0,
                created_at TEXT NOT NULL
            )""")
            
            # –¢–∞–±–ª–∏—Ü–∞ spots
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS spots (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                latitude REAL NOT NULL,
                longitude REAL NOT NULL
            )""")
            
            # –¢–∞–±–ª–∏—Ü–∞ checkins
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS checkins (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                spot_id INTEGER NOT NULL,
                timestamp TEXT NOT NULL,
                active BOOLEAN NOT NULL DEFAULT 1,
                checkin_type INTEGER NOT NULL,
                duration_hours REAL,
                arrival_time TEXT,
                end_time TEXT,
                FOREIGN KEY (user_id) REFERENCES users(user_id),
                FOREIGN KEY (spot_id) REFERENCES spots(id)
            )""")
            conn.commit()
            logging.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def add_or_update_user(user_id: int, first_name: str, last_name: str = None, username: str = None, is_admin: bool = False):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT OR REPLACE INTO users (user_id, first_name, last_name, username, is_admin, created_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (user_id, first_name, last_name, username, is_admin, datetime.utcnow().isoformat()))
            conn.commit()
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def get_user(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ user_id."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT user_id, first_name, last_name, username, is_admin FROM users WHERE user_id = ?", (user_id,))
            user = cursor.fetchone()
            if user:
                return {
                    "user_id": user[0],
                    "first_name": user[1],
                    "last_name": user[2],
                    "username": user[3],
                    "is_admin": user[4]
                }
            return None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

def get_spots():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ø–æ—Ç–æ–≤."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name, latitude, longitude FROM spots")
            spots = [{"id": row[0], "name": row[1], "lat": row[2], "lon": row[3]} for row in cursor.fetchall()]
            logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(spots)} —Å–ø–æ—Ç–æ–≤ –≤ –±–∞–∑–µ.")
            return spots
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Ç–æ–≤: {e}")
        return []

def add_spot(name, lat, lon):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Å–ø–æ—Ç –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO spots (name, latitude, longitude) VALUES (?, ?, ?)", (name, lat, lon))
            conn.commit()
            spot_id = cursor.lastrowid
            logging.info(f"‚úÖ –ù–æ–≤—ã–π —Å–ø–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: ID={spot_id}, Name={name}, Lat={lat}, Lon={lon}")
            return spot_id
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–æ—Ç–∞: {e}")
        return None

def checkin_user(user_id, spot_id, checkin_type, duration_hours=None, arrival_time=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —á–µ–∫–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞–∑—á–µ–∫–∏–≤–∞–µ—Ç —Å –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Ç–æ–≤."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫-–∏–Ω
            cursor.execute("SELECT id, spot_id FROM checkins WHERE user_id = ? AND active = 1", (user_id,))
            active_checkin = cursor.fetchone()
            if active_checkin:
                # –†–∞–∑—á–µ–∫–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ø–æ—Ç–∞
                cursor.execute("UPDATE checkins SET active = 0 WHERE id = ?", (active_checkin[0],))
                logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑—á–µ–∫–∏–Ω–µ–Ω —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ø–æ—Ç–∞ ID={active_checkin[1]}")

            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑—á–µ–∫–∏–Ω–∞
            timestamp = datetime.utcnow()
            end_time = None
            if checkin_type == 1 and duration_hours:
                end_time = (timestamp + timedelta(hours=duration_hours)).isoformat()
            elif checkin_type == 2 and arrival_time:
                arrival_dt = datetime.fromisoformat(arrival_time.replace("Z", "+00:00"))
                end_time = arrival_dt.isoformat()  # –ü–æ–∫–∞ –Ω–µ –∑–∞–¥–∞—ë–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–µ–∫-–∏–Ω
            cursor.execute("""
                INSERT INTO checkins (user_id, spot_id, timestamp, active, checkin_type, duration_hours, arrival_time, end_time)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (user_id, spot_id, timestamp.isoformat(), 1, checkin_type, duration_hours, arrival_time, end_time))
            conn.commit()
            logging.info(f"‚úÖ –ß–µ–∫–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å–ø–æ—Ç–µ {spot_id} (type={checkin_type}, end_time={end_time})")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á–µ–∫–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def get_active_checkin(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫-–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, spot_id, checkin_type, duration_hours, arrival_time, end_time
                FROM checkins
                WHERE user_id = ? AND active = 1
            """, (user_id,))
            checkin = cursor.fetchone()
            if checkin:
                return {
                    "id": checkin[0],
                    "spot_id": checkin[1],
                    "checkin_type": checkin[2],
                    "duration_hours": checkin[3],
                    "arrival_time": checkin[4],
                    "end_time": checkin[5]
                }
            return None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞: {e}")
        return None

def get_spot_by_id(spot_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Ç–µ –ø–æ –µ–≥–æ ID."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name, latitude, longitude FROM spots WHERE id = ?", (spot_id,))
            spot = cursor.fetchone()
            if spot:
                return {"id": spot[0], "name": spot[1], "lat": spot[2], "lon": spot[3]}
            return None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Ç–∞: {e}")
        return None

def checkout_user(checkin_id):
    """–†–∞–∑—á–µ–∫–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE checkins SET active = 0 WHERE id = ?", (checkin_id,))
            conn.commit()
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—á–µ–∫–∏–Ω–µ–Ω (checkin_id={checkin_id})")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—á–µ–∫–∏–Ω–µ: {e}")

def update_checkin_to_arrived(checkin_id, duration_hours):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —á–µ–∫-–∏–Ω —Ç–∏–ø–∞ 2 (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–∏–µ—Ö–∞—Ç—å) –≤ —Ç–∏–ø 1 (—É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ)."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            timestamp = datetime.utcnow()
            end_time = (timestamp + timedelta(hours=duration_hours)).isoformat()
            cursor.execute("""
                UPDATE checkins
                SET checkin_type = 1, duration_hours = ?, arrival_time = NULL, end_time = ?
                WHERE id = ?
            """, (duration_hours, end_time, checkin_id))
            conn.commit()
            logging.info(f"‚úÖ –ß–µ–∫-–∏–Ω ID={checkin_id} –æ–±–Ω–æ–≤–ª—ë–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∏–±—ã—Ç–∏–µ")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ–∫-–∏–Ω–∞: {e}")

def update_spot_name(spot_id: int, new_name: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE spots SET name = ? WHERE id = ?", (new_name, spot_id))
            conn.commit()
            logging.info(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞ ID={spot_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_name}'")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–æ—Ç–∞: {e}")

def update_spot_location(spot_id: int, new_lat: float, new_lon: float):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Å–ø–æ—Ç–∞."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE spots SET latitude = ?, longitude = ? WHERE id = ?", (new_lat, new_lon, spot_id))
            conn.commit()
            logging.info(f"‚úÖ –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è —Å–ø–æ—Ç–∞ ID={spot_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: Lat={new_lat}, Lon={new_lon}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ —Å–ø–æ—Ç–∞: {e}")

def delete_spot(spot_id: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–ø–æ—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —á–µ–∫-–∏–Ω—ã."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM checkins WHERE spot_id = ?", (spot_id,))
            cursor.execute("DELETE FROM spots WHERE id = ?", (spot_id,))
            conn.commit()
            logging.info(f"‚úÖ –°–ø–æ—Ç ID={spot_id} —É–¥–∞–ª—ë–Ω –≤–º–µ—Å—Ç–µ —Å —á–µ–∫-–∏–Ω–∞–º–∏")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–æ—Ç–∞: {e}")

def get_checkins_for_spot(spot_id: int) -> tuple[int, list[dict], list[dict]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–∞ –º–µ—Å—Ç–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö, –∫—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–∏–µ—Ö–∞—Ç—å."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            # –õ—é–¥–∏ –Ω–∞ –º–µ—Å—Ç–µ (checkin_type=1, active=1)
            cursor.execute("""
                SELECT u.first_name, u.username 
                FROM checkins c
                JOIN users u ON c.user_id = u.user_id
                WHERE c.spot_id = ? AND c.checkin_type = 1 AND c.active = 1
            """, (spot_id,))
            on_spot_users = [{"first_name": row[0], "username": row[1]} for row in cursor.fetchall()]
            on_spot_count = len(on_spot_users)

            # –õ—é–¥–∏, –ø–ª–∞–Ω–∏—Ä—É—é—â–∏–µ –ø—Ä–∏–µ—Ö–∞—Ç—å (checkin_type=2, active=1)
            cursor.execute("""
                SELECT u.first_name, u.username, c.arrival_time 
                FROM checkins c
                JOIN users u ON c.user_id = u.user_id
                WHERE c.spot_id = ? AND c.checkin_type = 2 AND c.active = 1
            """, (spot_id,))
            arriving_users = [
                {"first_name": row[0], "username": row[1], "arrival_time": datetime.fromisoformat(row[2].replace("Z", "+00:00")).strftime("%H:%M")}
                for row in cursor.fetchall()
            ]
            return on_spot_count, on_spot_users, arriving_users
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫-–∏–Ω–æ–≤ –¥–ª—è —Å–ø–æ—Ç–∞ {spot_id}: {e}")
        return 0, [], []