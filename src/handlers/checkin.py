import logging

from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_spots, add_spot, checkin_user  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

logging.basicConfig(level=logging.INFO)
checkin_router = Router()

class CheckinState(StatesGroup):
    choosing_spot = State()
    adding_spot = State()

@checkin_router.callback_query(F.data == "checkin")
async def process_checkin(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–æ—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ."""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –Ω–∞ –ß–µ–∫-–∏–Ω (callback)")
    spots = get_spots() or []  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

    if spots:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=spot["name"], callback_data=f"spot_{spot['id']}")] for spot in spots
            ] + [[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–æ—Ç", callback_data="add_spot")]]
        )
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Ç –¥–ª—è —á–µ–∫–∞–∏–Ω–∞:", reply_markup=keyboard)
        await state.set_state(CheckinState.choosing_spot)
    else:
        await callback.message.answer("\U0001F50D –ü–æ—Ö–æ–∂–µ, —Ä—è–¥–æ–º –Ω–µ—Ç —Å–ø–æ—Ç–æ–≤. \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
        await state.set_state(CheckinState.adding_spot)
    await callback.answer()

@checkin_router.callback_query(F.data.startswith("spot_"))
async def checkin_existing_spot(callback: types.CallbackQuery, state: FSMContext):
    """–ß–µ–∫–∏–Ω –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å–ø–æ—Ç–µ."""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Å–ø–æ—Ç: {callback.data}")
    spot_id = int(callback.data.split("_")[1])
    checkin_user(callback.from_user.id, spot_id)
    await callback.message.edit_text("\u2705 –í—ã –∑–∞—á–µ–∫–∏–Ω–∏–ª–∏—Å—å! üåä")
    await state.clear()
    await callback.answer()

@checkin_router.callback_query(F.data == "add_spot")
async def request_location(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ç–∞."""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–æ—Ç")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.delete()
    await callback.message.answer("\u2705 –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–æ—Ç.", reply_markup=keyboard)
    await state.set_state(CheckinState.adding_spot)
    await callback.answer()

@checkin_router.message(CheckinState.adding_spot, F.location)
async def add_new_spot_handler(message: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–æ—Ç –∏ —á–µ–∫–∏–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—É–¥–∞."""
    lat, lon = message.location.latitude, message.location.longitude
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: {lat}, {lon}")
    spot_id = add_spot(f"–ù–æ–≤—ã–π —Å–ø–æ—Ç {lat:.3f}, {lon:.3f}", lat, lon)
    checkin_user(message.from_user.id, spot_id)
    await message.answer(f"\u2705 –ù–æ–≤—ã–π —Å–ø–æ—Ç —Å–æ–∑–¥–∞–Ω!\n–¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—á–µ–∫–∏–Ω–∏–ª–∏—Å—å –∑–¥–µ—Å—å. üåä")
    await state.clear()