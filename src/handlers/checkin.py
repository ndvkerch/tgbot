import logging
import aiosqlite
import pytz
from datetime import datetime, timedelta, timezone

from aiogram import Bot, Router, types, F
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import (
    DB_PATH,
    get_spots,
    add_spot,
    checkin_user,
    get_active_checkin,
    get_spot_by_id,
    update_checkin_to_arrived,
    update_spot_name,
    update_spot_location,
    delete_spot,
    checkout_user,
    get_user,
    add_or_update_user,
    deactivate_all_checkins,
    notify_favorite_users,
)
from keyboards import (
    get_main_keyboard,
    create_spot_keyboard,
    create_checkin_type_keyboard,
    create_duration_keyboard,
    create_arrival_time_keyboard,
    create_arrival_confirmation_keyboard,
    create_location_request_keyboard,
    create_back_to_menu_keyboard,
    create_confirm_delete_keyboard,
    create_checkin_new_spot_keyboard,
    create_uncheckin_keyboard,
    create_confirm_arrival_keyboard,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
checkin_router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class CheckinState(StatesGroup):
    choosing_spot = State()
    adding_spot = State()
    naming_spot = State()
    editing_location = State()
    editing_name = State()
    confirming_delete = State()
    selecting_checkin_type = State()
    setting_duration = State()
    setting_arrival_time = State()
    confirming_arrival = State()

# –ë–ª–æ–∫ 1: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""
    user = await get_user(user_id)
    if user:
        result = user["is_admin"]
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º? {result}")
        return result
    return False

# –ë–ª–æ–∫ 2: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ–∫-–∏–Ω–∞
@checkin_router.callback_query(F.data == "checkin")
async def process_checkin(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–æ—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ."""
    user_id = callback.from_user.id
    user = await get_user(user_id)
    if not user:
        await add_or_update_user(
            user_id=user_id,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name,
            username=callback.from_user.username
        )
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –Ω–∞ –ß–µ–∫-–∏–Ω (callback)")
    spots = await get_spots() or []

    if spots:
        keyboard = create_spot_keyboard(spots, await is_admin(user_id))
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Ç:", reply_markup=keyboard)
        await state.set_state(CheckinState.choosing_spot)
    else:
        await callback.message.answer("\U0001F50D –ü–æ—Ö–æ–∂–µ, —Ä—è–¥–æ–º –Ω–µ—Ç —Å–ø–æ—Ç–æ–≤. \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
        keyboard = create_location_request_keyboard()
        await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)
        await state.set_state(CheckinState.adding_spot)
    await callback.answer()

@checkin_router.callback_query(F.data.startswith("spot_"))
async def select_checkin_type(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–ø–æ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è."""
    spot_id = int(callback.data.split("_")[1])
    spot = await get_spot_by_id(spot_id)
    if not spot:
        await callback.message.answer("‚ùå –°–ø–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    await state.update_data(spot_id=spot_id)
    await state.set_state(CheckinState.selecting_checkin_type)

    await callback.message.answer_location(latitude=spot["lat"], longitude=spot["lon"])
    keyboard = create_checkin_type_keyboard(spot_id)  # –ü–µ—Ä–µ–¥–∞–µ–º spot_id
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Ç: {spot['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await callback.answer()

@checkin_router.callback_query(F.data == "checkin_type_1")
async def checkin_type_1(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    spot_id = data.get("spot_id")
    user_id = callback.from_user.id
    
    if not spot_id:
        await callback.message.answer("‚ùå –°–ø–æ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await callback.answer()
        return
    
    try:
        checkin_id = await checkin_user(user_id, spot_id, checkin_type=1, bot=bot)
        if not checkin_id:
            raise ValueError("Checkin ID not returned")
            
        await state.update_data(checkin_id=checkin_id)
        
        keyboard = create_duration_keyboard()
        await callback.message.edit_text("–°–∫–æ–ª—å–∫–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è?")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=keyboard)
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ: selecting_checkin_type –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫-–∏–Ω–∞: {str(e)}")
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —á–µ–∫-–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@checkin_router.callback_query(F.data == "checkin_type_2")
async def checkin_type_2(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    spot_id = data.get("spot_id")
    if not spot_id:
        await callback.message.answer("‚ùå –°–ø–æ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await callback.answer()
        return
    # –í—ã–∑—ã–≤–∞–µ–º plan_to_arrive —Å –Ω—É–∂–Ω—ã–º callback_data
    callback.data = f"plan_to_arrive_{spot_id}"
    await plan_to_arrive(callback, state)

@checkin_router.callback_query(F.data.startswith("duration_"), CheckinState.selecting_checkin_type)
async def process_duration(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    current_state = await state.get_state()
    logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª process_duration –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}, callback.data={callback.data}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    data = await state.get_data()
    user_id = callback.from_user.id
    checkin_id = data.get("checkin_id")
    
    if not checkin_id:
        logger.warning("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç checkin_id")
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    duration_hours = int(callback.data.split("_")[1])
    
    try:
        now = datetime.now(pytz.utc)
        end_time = (now + timedelta(hours=duration_hours)).isoformat()
        
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute('''
                UPDATE checkins 
                SET 
                    active = 1,
                    end_time = ?,
                    duration_hours = ?,
                    timestamp = ?
                WHERE id = ?
            ''', (end_time, duration_hours, now.isoformat(), checkin_id))
            await conn.commit()
            logger.info(f"–ß–µ–∫-–∏–Ω {checkin_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–∏–ø–∞ 1, active=1")

        spot = await get_spot_by_id(data["spot_id"])
        if bot:
            await notify_favorite_users(
                spot_id=spot["id"],
                checkin_user_id=user_id,
                bot=bot,
                checkin_type=1,
                arrival_time=None
            )

        keyboard = create_uncheckin_keyboard()
        await callback.message.edit_text(
            f"\u2705 –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –Ω–∞ —Å–ø–æ—Ç–µ '{spot['name']}'! üåä",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫-–∏–Ω–∞ {checkin_id}: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    await state.clear()
    await callback.answer()

@checkin_router.callback_query(F.data.startswith("arrival_"))
async def process_arrival_time(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    arrival_str = callback.data.split("_")[1]
    now = datetime.now(timezone.utc)
    arrival_time = (now + timedelta(hours=int(arrival_str))).isoformat()

    data = await state.get_data()
    spot_id = data["spot_id"]
    user_id = callback.from_user.id

    await checkin_user(user_id, spot_id, checkin_type=2, arrival_time=arrival_time, bot=bot)
    spot = await get_spot_by_id(spot_id)
    await callback.message.edit_text(f"\u2705 –í—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–µ–∑–¥ –Ω–∞ —Å–ø–æ—Ç '{spot['name']}'! üåä")
    
    keyboard = create_confirm_arrival_keyboard()
    await callback.message.answer("–ö–æ–≥–¥–∞ –ø—Ä–∏–µ–¥–µ—Ç–µ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–±—ã—Ç–∏–µ:", reply_markup=keyboard)
    await state.clear()
    await callback.answer()

@checkin_router.callback_query(F.data == "confirm_arrival")
async def confirm_arrival(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    active_checkin = await get_active_checkin(user_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–Ø –ø—Ä–∏–µ—Ö–∞–ª!'. –ê–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫-–∏–Ω: {active_checkin}")

    if not active_checkin or active_checkin["checkin_type"] != 2:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–µ–∑–¥–∞.")
        keyboard = create_back_to_menu_keyboard()
        await callback.message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=keyboard)
        await state.clear()
        await callback.answer()
        return

    await state.update_data(checkin_id=active_checkin["id"], spot_id=active_checkin["spot_id"])
    await state.set_state(CheckinState.setting_duration)
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CheckinState.setting_duration –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –¥–∞–Ω–Ω—ã–µ: {await state.get_data()}")

    keyboard = create_duration_keyboard()
    await callback.message.edit_text("–í—ã –ø—Ä–∏–µ—Ö–∞–ª–∏! –°–∫–æ–ª—å–∫–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è?")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=keyboard)
    await callback.answer()

@checkin_router.callback_query(F.data.startswith("duration_"), CheckinState.setting_duration)
async def process_arrival_duration(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    current_state = await state.get_state()
    logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª process_arrival_duration –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}, callback.data={callback.data}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    duration_hours = int(callback.data.split("_")[1])

    data = await state.get_data()
    checkin_id = data.get("checkin_id")
    spot_id = data.get("spot_id")
    logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")

    if not checkin_id or not spot_id:
        logger.warning("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç checkin_id –∏–ª–∏ spot_id")
        await callback.message.edit_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await callback.answer()
        return

    now = datetime.now(pytz.utc)
    end_time = now + timedelta(hours=duration_hours)
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫-–∏–Ω–∞ {checkin_id}: timestamp={now.isoformat()}, end_time={end_time.isoformat()}")

    async with aiosqlite.connect(DB_PATH) as conn:
        try:
            await conn.execute('''
                UPDATE checkins 
                SET 
                    checkin_type = 1,
                    timestamp = ?,
                    duration_hours = ?,
                    end_time = ?,
                    arrival_time = NULL,
                    active = 1
                WHERE id = ?
            ''', (now.isoformat(), duration_hours, end_time.isoformat(), checkin_id))
            await conn.commit()
            logger.info(f"–ß–µ–∫-–∏–Ω {checkin_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: checkin_type=1, arrival_time=NULL, active=1")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ–∫-–∏–Ω–∞ {checkin_id}: {str(e)}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ–∫-–∏–Ω–∞.")
            await state.clear()
            await callback.answer()
            return

    spot = await get_spot_by_id(spot_id)
    await notify_favorite_users(
        spot_id=spot_id,
        checkin_user_id=callback.from_user.id,
        bot=bot,
        checkin_type=1,
        arrival_time=None
    )

    keyboard = create_uncheckin_keyboard()
    await callback.message.edit_text(
        f"\u2705 –í—ã –ø—Ä–∏–±—ã–ª–∏ –∏ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –Ω–∞ —Å–ø–æ—Ç–µ '{spot['name']}'! üåä",
        reply_markup=keyboard
    )

    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞ {checkin_id}")
    await callback.answer()

@checkin_router.callback_query(F.data == "cancel_checkin")
async def cancel_checkin(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    checkin_id = data.get("checkin_id")

    if checkin_id:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.cursor()
            await cursor.execute("""
                SELECT id FROM checkins 
                WHERE 
                    id = ? 
                    AND end_time IS NULL 
                    AND active = 0
            """, (checkin_id,))
            result = await cursor.fetchone()
            
            if result:
                await cursor.execute("DELETE FROM checkins WHERE id = ?", (checkin_id,))
                await conn.commit()
                logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —á–µ–∫–∏–Ω–∞ {checkin_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    spots = await get_spots() or []
    if spots:
        keyboard = create_spot_keyboard(spots, await is_admin(user_id))
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Ç:", reply_markup=keyboard)
        await state.set_state(CheckinState.choosing_spot)
    else:
        await callback.message.edit_text("\U0001F50D –ü–æ—Ö–æ–∂–µ, —Ä—è–¥–æ–º –Ω–µ—Ç —Å–ø–æ—Ç–æ–≤. \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
        keyboard = create_location_request_keyboard()
        await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)
        await state.set_state(CheckinState.adding_spot)

    await state.clear()
    await callback.answer()

@checkin_router.callback_query(F.data.startswith("plan_to_arrive_"))
async def plan_to_arrive(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Ç–∞."""
    spot_id = int(callback.data.split("_")[-1])
    spot = await get_spot_by_id(spot_id)
    if not spot:
        await callback.message.answer("‚ùå –°–ø–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    await state.update_data(spot_id=spot_id)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Ç: {spot['name']}\n–ö–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å?")
    keyboard = create_arrival_time_keyboard()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:", reply_markup=keyboard)
    await state.set_state(CheckinState.setting_arrival_time)
    await callback.answer()

@checkin_router.callback_query(F.data.startswith("late_arrival_confirm_"))
async def handle_late_arrival(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    checkin_id = int(callback.data.split("_")[3])
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ late_arrival_confirm –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, checkin_id={checkin_id}")
    
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.cursor()
        await cursor.execute("""
            SELECT id, spot_id 
            FROM checkins 
            WHERE id = ? AND user_id = ? AND checkin_type = 2
        """, (checkin_id, user_id))
        result = await cursor.fetchone()
        
        if not result:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å —á–µ–∫-–∏–Ω–∞ —Å id={checkin_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –ø—Ä–∏–±—ã—Ç–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø–∏—Å—å —É—Å—Ç–∞—Ä–µ–ª–∞.")
            await state.clear()
            await callback.answer()
            return
        
        checkin_id, spot_id = result
        logger.info(f"–ù–∞–π–¥–µ–Ω —á–µ–∫-–∏–Ω {checkin_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å–ø–æ—Ç–µ {spot_id}")
    
    await state.update_data(checkin_id=checkin_id, spot_id=spot_id)
    logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: checkin_id={checkin_id}, spot_id={spot_id}")
    
    keyboard = create_duration_keyboard()
    await callback.message.edit_text(
        "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–∏–±—ã—Ç–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )
    await state.set_state(CheckinState.setting_duration)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ setting_duration")
    
    await callback.answer()

# –ë–ª–æ–∫ 3: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@checkin_router.callback_query(F.data.startswith("edit_spot_"))
async def edit_spot(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–æ—Ç–æ–≤.", show_alert=True)
        return

    spot_id = int(callback.data.split("_")[2])
    spots = await get_spots()
    spot = next((s for s in spots if s["id"] == spot_id), None)
    if not spot:
        await callback.message.answer("‚ùå –°–ø–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await state.update_data(spot_id=spot_id)
    await callback.message.answer(f"–¢–µ–∫—É—â–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–ø–æ—Ç–∞ '{spot['name']}':")
    await callback.message.answer_location(latitude=spot["lat"], longitude=spot["lon"])
    
    keyboard = create_location_request_keyboard()
    await callback.message.answer("\u2705 –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Å–ø–æ—Ç–∞:", reply_markup=keyboard)
    await state.set_state(CheckinState.editing_location)
    await callback.answer()

@checkin_router.message(CheckinState.editing_location, F.location)
async def process_new_location(message: types.Message, state: FSMContext):
    new_lat, new_lon = message.location.latitude, message.location.longitude
    data = await state.get_data()
    spot_id = data["spot_id"]
    await update_spot_location(spot_id, new_lat, new_lon)
    logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Å–ø–æ—Ç–∞ ID {spot_id}: Lat={new_lat}, Lon={new_lon}")

    await message.answer("üìç –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(CheckinState.editing_name)

@checkin_router.message(CheckinState.editing_location)
async def handle_invalid_new_location(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'.")
    keyboard = create_location_request_keyboard()
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)

@checkin_router.message(CheckinState.editing_name, F.text)
async def process_new_spot_name(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    if not new_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑:")
        return

    data = await state.get_data()
    spot_id = data["spot_id"]
    await update_spot_name(spot_id, new_name)
    logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞ ID {spot_id} –Ω–∞ '{new_name}'")

    keyboard = create_back_to_menu_keyboard()
    await message.answer(f"\u2705 –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_name}'!", reply_markup=keyboard)
    await state.clear()

@checkin_router.message(CheckinState.editing_name)
async def handle_invalid_new_spot_name(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º.")

@checkin_router.callback_query(F.data.startswith("delete_spot_"))
async def confirm_delete_spot(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤.", show_alert=True)
        return

    spot_id = int(callback.data.split("_")[2])
    await state.update_data(spot_id=spot_id)
    
    keyboard = create_confirm_delete_keyboard(spot_id)
    await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Ç?", reply_markup=keyboard)
    await state.set_state(CheckinState.confirming_delete)
    await callback.answer()

@checkin_router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_spot_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤.", show_alert=True)
        return

    spot_id = int(callback.data.split("_")[2])
    await delete_spot(spot_id)
    logging.info(f"–ê–¥–º–∏–Ω {user_id} —É–¥–∞–ª–∏–ª —Å–ø–æ—Ç ID {spot_id}")

    keyboard = create_back_to_menu_keyboard()
    await callback.message.edit_text("\u2705 –°–ø–æ—Ç —É–¥–∞–ª—ë–Ω!", reply_markup=keyboard)
    await state.clear()
    await callback.answer()

@checkin_router.callback_query(F.data == "cancel_delete")
async def cancel_delete_spot(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    spots = await get_spots() or []
    if spots:
        keyboard = create_spot_keyboard(spots, await is_admin(user_id))
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Ç –¥–ª—è —á–µ–∫–∞–∏–Ω–∞:", reply_markup=keyboard)
        await state.set_state(CheckinState.choosing_spot)
    else:
        await callback.message.edit_text("\U0001F50D –ü–æ—Ö–æ–∂–µ, —Ä—è–¥–æ–º –Ω–µ—Ç —Å–ø–æ—Ç–æ–≤. \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
        keyboard = create_location_request_keyboard()
        await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)
        await state.set_state(CheckinState.adding_spot)
    await callback.answer()

@checkin_router.callback_query(F.data.startswith("cancel_late_arrival_"))
async def cancel_late_arrival(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    checkin_id = int(callback.data.split("_")[3])
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ cancel_late_arrival –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, checkin_id={checkin_id}")
    
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.cursor()
        await cursor.execute("""
            SELECT id 
            FROM checkins 
            WHERE id = ? AND user_id = ? AND checkin_type = 2
        """, (checkin_id, user_id))
        result = await cursor.fetchone()
        
        if result:
            await cursor.execute("DELETE FROM checkins WHERE id = ?", (checkin_id,))
            await conn.commit()
            logger.info(f"–ß–µ–∫-–∏–Ω {checkin_id} —É–¥–∞–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å —á–µ–∫-–∏–Ω–∞ —Å id={checkin_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    await callback.message.edit_text("‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ —Å–ø–æ—Ç.")
    keyboard = create_back_to_menu_keyboard()
    await callback.message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=keyboard)
    await state.clear()
    await callback.answer()

# –ë–ª–æ–∫ 4: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ø–æ—Ç–∞
@checkin_router.callback_query(F.data == "add_spot")
async def request_location(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–æ—Ç")
    keyboard = create_location_request_keyboard()
    await callback.message.delete()
    await callback.message.answer("\u2705 –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–æ—Ç.", reply_markup=keyboard)
    await state.set_state(CheckinState.adding_spot)
    await callback.answer()

@checkin_router.message(CheckinState.adding_spot, F.location)
async def process_location(message: types.Message, state: FSMContext):
    lat, lon = message.location.latitude, message.location.longitude
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: {lat}, {lon}")
    await state.update_data(lat=lat, lon=lon)
    await message.answer("üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(CheckinState.naming_spot)

@checkin_router.message(CheckinState.adding_spot)
async def handle_invalid_location(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'.")
    keyboard = create_location_request_keyboard()
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)

@checkin_router.message(CheckinState.naming_spot, F.text)
async def add_new_spot_handler(message: types.Message, state: FSMContext, bot: Bot):
    spot_name = message.text.strip()
    if not spot_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑:")
        return

    data = await state.get_data()
    lat, lon = data["lat"], data["lon"]
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞—ë—Ç —Å–ø–æ—Ç '{spot_name}' —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {lat}, {lon}")

    spot_id = await add_spot(spot_name, lat, lon, creator_id=user_id)
    await state.update_data(spot_id=spot_id)
    
    keyboard = create_checkin_new_spot_keyboard()
    await message.answer(
        f"\u2705 –°–ø–æ—Ç '{spot_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
        "–•–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —Å–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Å–ø–æ—Ç–µ?",
        reply_markup=keyboard
    )
    await state.set_state(CheckinState.choosing_spot)
    await state.update_data(new_spot_created=True)

@checkin_router.callback_query(F.data == "checkin_new_spot")
async def handle_new_spot_checkin(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    spot_id = data.get("spot_id")
    
    if not spot_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Å–ø–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    spot = await get_spot_by_id(spot_id)
    await callback.message.answer_location(latitude=spot["lat"], longitude=spot["lon"])
    
    keyboard = create_checkin_type_keyboard()
    await callback.message.answer(
        f"–í—ã —Å–æ–∑–¥–∞–ª–∏ —Å–ø–æ—Ç: {spot['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=keyboard
    )
    await state.set_state(CheckinState.selecting_checkin_type)
    await callback.answer()

@checkin_router.message(CheckinState.naming_spot)
async def handle_invalid_spot_name(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º.")

# –ë–ª–æ–∫ 5: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Ä–∞–∑—á–µ–∫–∏–Ω–∞
@checkin_router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await callback.message.delete()
    reply_markup = await get_main_keyboard(user_id)
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=reply_markup)
    await state.clear()
    await callback.answer()

@checkin_router.callback_query(F.data == "uncheckin")
async def process_uncheckin(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    active_checkin = await get_active_checkin(user_id)
    
    if not active_checkin:
        await callback.message.edit_text("‚ùå –í—ã –µ—â–µ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –Ω–∞ —Å–ø–æ—Ç–µ.")
        keyboard = create_back_to_menu_keyboard()
        await callback.message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=keyboard)
        await callback.answer()
        return

    await checkout_user(active_checkin["id"])
    spot = await get_spot_by_id(active_checkin["spot_id"])
    await callback.message.edit_text(f"\u2705 –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–ø–æ—Ç '{spot['name']}'! üö™")
    
    reply_markup = await get_main_keyboard(user_id)
    await callback.message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=reply_markup)
    await state.clear()
    await callback.answer()