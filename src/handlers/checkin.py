import logging
from datetime import datetime, timedelta

from aiogram import Bot, Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_spots, add_spot, checkin_user, get_active_checkin, get_spot_by_id, update_checkin_to_arrived, update_spot_name, update_spot_location, delete_spot, checkout_user, get_user, add_or_update_user
from keyboards import get_main_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
checkin_router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class CheckinState(StatesGroup):
    choosing_spot = State()
    adding_spot = State()
    naming_spot = State()
    editing_location = State()
    editing_name = State()
    confirming_delete = State()
    selecting_checkin_type = State()
    setting_duration = State()
    setting_arrival_time = State()
    confirming_arrival = State()

# –ë–ª–æ–∫ 1: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""
    user = await get_user(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º await
    if user:
        result = user["is_admin"]
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º? {result}")
        return result
    return False

def create_spot_keyboard(spots: list, is_admin: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ø–æ—Ç–æ–≤, —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    keyboard = []
    for spot in spots:
        spot_buttons = [InlineKeyboardButton(text=spot["name"], callback_data=f"spot_{spot['id']}")]
        if is_admin:
            spot_buttons.append(InlineKeyboardButton(text="‚úèÔ∏è", callback_data=f"edit_spot_{spot['id']}"))
            spot_buttons.append(InlineKeyboardButton(text="üóëÔ∏è", callback_data=f"delete_spot_{spot['id']}"))
        keyboard.append(spot_buttons)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ø–æ—Ç" –∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–æ—Ç", callback_data="add_spot")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_duration_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 —á–∞—Å", callback_data="duration_1"),
         InlineKeyboardButton(text="2 —á–∞—Å–∞", callback_data="duration_2"),
         InlineKeyboardButton(text="3 —á–∞—Å–∞", callback_data="duration_3")],
        [InlineKeyboardButton(text="4 —á–∞—Å–∞", callback_data="duration_4"),
         InlineKeyboardButton(text="5 —á–∞—Å–æ–≤", callback_data="duration_5"),
         InlineKeyboardButton(text="6 —á–∞—Å–æ–≤", callback_data="duration_6")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_checkin")]
    ])
    return keyboard

def create_arrival_time_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 1 —á–∞—Å", callback_data="arrival_1"),
         InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞", callback_data="arrival_2"),
         InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞", callback_data="arrival_3")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_checkin")]
    ])
    return keyboard

def create_arrival_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –Ω–∞ –º–µ—Å—Ç–µ", callback_data="late_arrival_confirm")],
        [InlineKeyboardButton(text="üö™ –û—Ç–º–µ–Ω–∞", callback_data="cancel_late_arrival")]
    ])

# –ë–ª–æ–∫ 2: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ–∫-–∏–Ω–∞
@checkin_router.callback_query(F.data == "checkin")
async def process_checkin(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–æ—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ."""
    user_id = callback.from_user.id
    user = await get_user(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º await
    if not user:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await add_or_update_user(  # –î–æ–±–∞–≤–ª—è–µ–º await
            user_id=user_id,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name,
            username=callback.from_user.username
        )
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –Ω–∞ –ß–µ–∫-–∏–Ω (callback)")
    spots = await get_spots() or []  # –î–æ–±–∞–≤–ª—è–µ–º await

    if spots:
        keyboard = create_spot_keyboard(spots, await is_admin(user_id))  # –î–æ–±–∞–≤–ª—è–µ–º await –¥–ª—è is_admin
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Ç:", reply_markup=keyboard)
        await state.set_state(CheckinState.choosing_spot)
    else:
        await callback.message.answer("\U0001F50D –ü–æ—Ö–æ–∂–µ, —Ä—è–¥–æ–º –Ω–µ—Ç —Å–ø–æ—Ç–æ–≤. \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)
        await state.set_state(CheckinState.adding_spot)
    await callback.answer()

@checkin_router.callback_query(F.data.startswith("spot_"))
async def select_checkin_type(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–ø–æ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    spot_id = int(callback.data.split("_")[1])
    spot = await get_spot_by_id(spot_id)
    if not spot:
        await callback.message.answer("‚ùå –°–ø–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Å–ø–æ—Ç–∞
    await callback.message.answer_location(latitude=spot["lat"], longitude=spot["lon"])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Ç–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    keyboard = create_checkin_type_keyboard()
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Ç: {spot['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    await state.update_data(spot_id=spot_id)
    await state.set_state(CheckinState.selecting_checkin_type)
    await callback.answer()

@checkin_router.callback_query(F.data == "checkin_type_1")
async def checkin_type_1(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–Ø —É–∂–µ –Ω–∞ —Å–ø–æ—Ç–µ', –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å."""
    await callback.message.edit_text("–°–∫–æ–ª—å–∫–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è?")
    keyboard = create_duration_keyboard()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=keyboard)
    await state.set_state(CheckinState.setting_duration)
    await callback.answer()

@checkin_router.callback_query(F.data == "checkin_type_2")
async def checkin_type_2(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ü–ª–∞–Ω–∏—Ä—É—é –ø—Ä–∏–µ—Ö–∞—Ç—å', –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è."""
    await callback.message.edit_text("–ö–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å?")
    keyboard = create_arrival_time_keyboard()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:", reply_markup=keyboard)
    await state.set_state(CheckinState.setting_arrival_time)
    await callback.answer()

@checkin_router.callback_query(F.data.startswith("duration_"))
async def process_duration(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —á–µ–∫-–∏–Ω."""
    duration_str = callback.data.split("_")[1]
    duration_hours = int(duration_str)

    data = await state.get_data()
    spot_id = data["spot_id"]
    user_id = callback.from_user.id

    # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ–∫-–∏–Ω
    await checkin_user(user_id, spot_id, checkin_type=1, bot=bot, duration_hours=duration_hours)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
    spot = await get_spot_by_id(spot_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä—è–º–æ –≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç—å —Å–ø–æ—Ç", callback_data="uncheckin")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    await callback.message.edit_text(
        f"\u2705 –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –Ω–∞ —Å–ø–æ—Ç–µ '{spot['name']}'! üåä",
        reply_markup=keyboard
    )
    
    await state.clear()
    await callback.answer()

@checkin_router.callback_query(F.data.startswith("arrival_"))
async def process_arrival_time(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —á–µ–∫-–∏–Ω."""
    arrival_str = callback.data.split("_")[1]
    now = datetime.utcnow()
    
    # –¢–µ–ø–µ—Ä—å arrival_str –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ "1", "2" –∏–ª–∏ "3"
    arrival_time = (now + timedelta(hours=int(arrival_str))).isoformat()

    data = await state.get_data()
    spot_id = data["spot_id"]
    user_id = callback.from_user.id

    # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ–∫-–∏–Ω —Å —Ç–∏–ø–æ–º "–ü–ª–∞–Ω–∏—Ä—É—é –ø—Ä–∏–µ—Ö–∞—Ç—å"
    await checkin_user(user_id, spot_id, checkin_type=2, bot=bot, arrival_time=arrival_time)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
    spot = await get_spot_by_id(spot_id)
    await callback.message.edit_text(f"\u2705 –í—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–µ–∑–¥ –Ω–∞ —Å–ø–æ—Ç '{spot['name']}'! üåä")
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–Ø –ø—Ä–∏–µ—Ö–∞–ª!", callback_data="confirm_arrival")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    await callback.message.answer("–ö–æ–≥–¥–∞ –ø—Ä–∏–µ–¥–µ—Ç–µ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–±—ã—Ç–∏–µ:", reply_markup=keyboard)
    await state.clear()
    await callback.answer()

@checkin_router.callback_query(F.data == "confirm_arrival")
async def confirm_arrival(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏–µ—Ö–∞–ª –Ω–∞ —Å–ø–æ—Ç."""
    user_id = callback.from_user.id
    active_checkin = await get_active_checkin(user_id)
    if not active_checkin or active_checkin["checkin_type"] != 2:
        await callback.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞.")
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        )
        await callback.message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=keyboard)
        await state.clear()
        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º checkin_id –∏ spot_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(checkin_id=active_checkin["id"], spot_id=active_checkin["spot_id"])
    await callback.message.edit_text("–°–∫–æ–ª—å–∫–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è?")
    keyboard = create_duration_keyboard()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=keyboard)
    await state.set_state(CheckinState.confirming_arrival)
    await callback.answer()

@checkin_router.callback_query(F.data.startswith("duration_"), CheckinState.confirming_arrival)
async def process_arrival_duration(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è."""
    duration_str = callback.data.split("_")[1]
    duration_hours = float(duration_str) if duration_str in ["1", "2", "3"] else None
    
    if duration_str.startswith("until_"):
        target_hour = int(duration_str.split("_")[1].split(":")[0])
        now = datetime.utcnow()
        target_time = now.replace(hour=target_hour, minute=0, second=0, microsecond=0)
        if target_time < now:
            target_time += timedelta(days=1)
        duration_hours = (target_time - now).total_seconds() / 3600

    data = await state.get_data()
    checkin_id = data["checkin_id"]
    spot_id = data.get("spot_id")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —á–µ–∫-–∏–Ω: –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ç–∏–ø 1 –∏ –∑–∞–¥–∞—ë–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    await update_checkin_to_arrived(checkin_id, duration_hours)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
    active_checkin = await get_active_checkin(callback.from_user.id)
    spot = await get_spot_by_id(spot_id or active_checkin["spot_id"])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä—è–º–æ –≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üö™ –†–∞–∑—á–µ–∫–∏–Ω–∏—Ç—å—Å—è", callback_data="uncheckin")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    await callback.message.edit_text(
        f"\u2705 –í—ã –ø—Ä–∏–±—ã–ª–∏ –∏ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –Ω–∞ —Å–ø–æ—Ç–µ '{spot['name']}'! üåä",
        reply_markup=keyboard
    )
    
    await state.clear()
    await callback.answer()

@checkin_router.callback_query(F.data == "cancel_checkin")
async def cancel_checkin(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —á–µ–∫-–∏–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Ç–∞."""
    spots = await get_spots() or []  # –î–æ–±–∞–≤–ª—è–µ–º await
    user_id = callback.from_user.id
    if spots:
        keyboard = create_spot_keyboard(spots, await is_admin(user_id))  # –î–æ–±–∞–≤–ª—è–µ–º await –¥–ª—è is_admin
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Ç:", reply_markup=keyboard)
        await state.set_state(CheckinState.choosing_spot)
    else:
        await callback.message.edit_text("\U0001F50D –ü–æ—Ö–æ–∂–µ, —Ä—è–¥–æ–º –Ω–µ—Ç —Å–ø–æ—Ç–æ–≤. \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)
        await state.set_state(CheckinState.adding_spot)
    await callback.answer()

@checkin_router.callback_query(F.data == "plan_to_arrive")
async def plan_to_arrive(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–±–∏—Ä–∞—é—Å—å –Ω–∞ —Å–ø–æ—Ç': –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è."""
    data = await state.get_data()
    spot_id = data.get("spot_id")
    
    if not spot_id:
        await callback.message.answer("‚ùå –°–ø–æ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Ç —Å–Ω–∞—á–∞–ª–∞.")
        spots = await get_spots() or []
        keyboard = create_spot_keyboard(spots, await is_admin(callback.from_user.id))
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Ç:", reply_markup=keyboard)
        await state.set_state(CheckinState.choosing_spot)
        await callback.answer()
        return

    spot = await get_spot_by_id(spot_id)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Ç: {spot['name']}\n–ö–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å?")
    keyboard = create_arrival_time_keyboard()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:", reply_markup=keyboard)
    await state.set_state(CheckinState.setting_arrival_time)
    await callback.answer()    

@checkin_router.callback_query(F.data == "late_arrival_confirm")
async def handle_late_arrival(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–¥–Ω–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è:", 
                               reply_markup=create_duration_keyboard())
    await state.set_state(CheckinState.setting_duration)

# –ë–ª–æ–∫ 3: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@checkin_router.callback_query(F.data.startswith("edit_spot_"))
async def edit_spot(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞): —Å–Ω–∞—á–∞–ª–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è."""
    user_id = callback.from_user.id
    if not await is_admin(user_id):  # –î–æ–±–∞–≤–ª—è–µ–º await
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–æ—Ç–æ–≤.", show_alert=True)
        return

    spot_id = int(callback.data.split("_")[2])
    spots = await get_spots()  # –î–æ–±–∞–≤–ª—è–µ–º await
    spot = next((s for s in spots if s["id"] == spot_id), None)
    if not spot:
        await callback.message.answer("‚ùå –°–ø–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await state.update_data(spot_id=spot_id)
    await callback.message.answer(f"–¢–µ–∫—É—â–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–ø–æ—Ç–∞ '{spot['name']}':")
    await callback.message.answer_location(latitude=spot["lat"], longitude=spot["lon"])
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.answer("\u2705 –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Å–ø–æ—Ç–∞:", reply_markup=keyboard)
    await state.set_state(CheckinState.editing_location)
    await callback.answer()

@checkin_router.message(CheckinState.editing_location, F.location)
async def process_new_location(message: types.Message, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Å–ø–æ—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è."""
    new_lat, new_lon = message.location.latitude, message.location.longitude
    data = await state.get_data()
    spot_id = data["spot_id"]
    await update_spot_location(spot_id, new_lat, new_lon)  # –î–æ–±–∞–≤–ª—è–µ–º await
    logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Å–ø–æ—Ç–∞ ID {spot_id}: Lat={new_lat}, Lon={new_lon}")

    await message.answer("üìç –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(CheckinState.editing_name)

@checkin_router.message(CheckinState.editing_location)
async def handle_invalid_new_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'.")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)

@checkin_router.message(CheckinState.editing_name, F.text)
async def process_new_spot_name(message: types.Message, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞."""
    new_name = message.text.strip()
    if not new_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑:")
        return

    data = await state.get_data()
    spot_id = data["spot_id"]
    await update_spot_name(spot_id, new_name)  # –î–æ–±–∞–≤–ª—è–µ–º await
    logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞ ID {spot_id} –Ω–∞ '{new_name}'")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    await message.answer(f"\u2705 –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_name}'!", reply_markup=keyboard)
    await state.clear()

@checkin_router.message(CheckinState.editing_name)
async def handle_invalid_new_spot_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ç–µ–∫—Å—Ç."""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º.")

@checkin_router.callback_query(F.data.startswith("delete_spot_"))
async def confirm_delete_spot(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    user_id = callback.from_user.id
    if not await is_admin(user_id):  # –î–æ–±–∞–≤–ª—è–µ–º await
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤.", show_alert=True)
        return

    spot_id = int(callback.data.split("_")[2])
    await state.update_data(spot_id=spot_id)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{spot_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
        ]
    )
    await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Ç?", reply_markup=keyboard)
    await state.set_state(CheckinState.confirming_delete)
    await callback.answer()

@checkin_router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_spot_handler(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–æ—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    user_id = callback.from_user.id
    if not await is_admin(user_id):  # –î–æ–±–∞–≤–ª—è–µ–º await
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤.", show_alert=True)
        return

    spot_id = int(callback.data.split("_")[2])
    await delete_spot(spot_id)  # –î–æ–±–∞–≤–ª—è–µ–º await
    logging.info(f"–ê–¥–º–∏–Ω {user_id} —É–¥–∞–ª–∏–ª —Å–ø–æ—Ç ID {spot_id}")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    await callback.message.edit_text("\u2705 –°–ø–æ—Ç —É–¥–∞–ª—ë–Ω!", reply_markup=keyboard)
    await state.clear()
    await callback.answer()

@checkin_router.callback_query(F.data == "cancel_delete")
async def cancel_delete_spot(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ç–∞."""
    user_id = callback.from_user.id
    spots = await get_spots() or []  # –î–æ–±–∞–≤–ª—è–µ–º await
    if spots:
        keyboard = create_spot_keyboard(spots, await is_admin(user_id))  # –î–æ–±–∞–≤–ª—è–µ–º await –¥–ª—è is_admin
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Ç –¥–ª—è —á–µ–∫–∞–∏–Ω–∞:", reply_markup=keyboard)
        await state.set_state(CheckinState.choosing_spot)
    else:
        await callback.message.edit_text("\U0001F50D –ü–æ—Ö–æ–∂–µ, —Ä—è–¥–æ–º –Ω–µ—Ç —Å–ø–æ—Ç–æ–≤. \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)
        await state.set_state(CheckinState.adding_spot)
    await callback.answer()

# –ë–ª–æ–∫ 4: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ø–æ—Ç–∞
@checkin_router.callback_query(F.data == "add_spot")
async def request_location(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ç–∞."""
    user_id = callback.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–æ—Ç")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.delete()
    await callback.message.answer("\u2705 –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–æ—Ç.", reply_markup=keyboard)
    await state.set_state(CheckinState.adding_spot)
    await callback.answer()

@checkin_router.message(CheckinState.adding_spot, F.location)
async def process_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞."""
    lat, lon = message.location.latitude, message.location.longitude
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: {lat}, {lon}")
    await state.update_data(lat=lat, lon=lon)
    await message.answer("üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(CheckinState.naming_spot)

@checkin_router.message(CheckinState.adding_spot)
async def handle_invalid_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'.")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("Normalize below:", reply_markup=keyboard)

@checkin_router.message(CheckinState.naming_spot, F.text)
async def add_new_spot_handler(message: types.Message, state: FSMContext, bot: Bot):
    """–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ø–æ—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è"""
    spot_name = message.text.strip()
    if not spot_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑:")
        return

    data = await state.get_data()
    lat, lon = data["lat"], data["lon"]
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞—ë—Ç —Å–ø–æ—Ç '{spot_name}' —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {lat}, {lon}")

    # –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ç
    spot_id = await add_spot(spot_name, lat, lon, creator_id=user_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–ø–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(spot_id=spot_id)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è —Å–µ–π—á–∞—Å", callback_data="checkin_new_spot")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    await message.answer(
        f"\u2705 –°–ø–æ—Ç '{spot_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
        "–•–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —Å–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Å–ø–æ—Ç–µ?",
        reply_markup=keyboard
    )
    await state.set_state(CheckinState.choosing_spot)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Ç–∞
    await state.update_data(new_spot_created=True)  # –§–ª–∞–≥, —á—Ç–æ —Å–ø–æ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω

@checkin_router.callback_query(F.data == "checkin_new_spot")
async def handle_new_spot_checkin(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∏–Ω–∞ –Ω–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Å–ø–æ—Ç–µ"""
    data = await state.get_data()
    spot_id = data.get("spot_id")
    
    if not spot_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Å–ø–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É —Å–ø–æ—Ç–∞
    spot = await get_spot_by_id(spot_id)
    await callback.message.answer_location(latitude=spot["lat"], longitude=spot["lon"])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —á–µ–∫–∏–Ω–∞
    keyboard = create_checkin_type_keyboard()
    await callback.message.answer(
        f"–í—ã —Å–æ–∑–¥–∞–ª–∏ —Å–ø–æ—Ç: {spot['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=keyboard
    )
    await state.set_state(CheckinState.selecting_checkin_type)
    await callback.answer()

@checkin_router.message(CheckinState.naming_spot)
async def handle_invalid_spot_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ç–µ–∫—Å—Ç."""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º.")

# –ë–ª–æ–∫ 5: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Ä–∞–∑—á–µ–∫–∏–Ω–∞
@checkin_router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = callback.from_user.id
    await callback.message.delete()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ get_main_keyboard
    reply_markup = await get_main_keyboard(user_id)
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=reply_markup)
    await state.clear()
    await callback.answer()

@checkin_router.callback_query(F.data == "uncheckin")
async def process_uncheckin(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑—á–µ–∫–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback.from_user.id
    active_checkin = await get_active_checkin(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º await
    
    if not active_checkin:
        await callback.message.edit_text("‚ùå –í—ã –µ—â–µ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –Ω–∞ —Å–ø–æ—Ç–µ.")
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        )
        await callback.message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=keyboard)
        await callback.answer()
        return

    # –†–∞–∑—á–µ–∫–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await checkout_user(active_checkin["id"])  # –î–æ–±–∞–≤–ª—è–µ–º await
    spot = await get_spot_by_id(active_checkin["spot_id"])  # –î–æ–±–∞–≤–ª—è–µ–º await
    await callback.message.edit_text(f"\u2705 –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–ø–æ—Ç '{spot['name']}'! üö™")
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    reply_markup = await get_main_keyboard(user_id)
    await callback.message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=reply_markup)
    await state.clear()
    await callback.answer()