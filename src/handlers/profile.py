import logging
from datetime import datetime, timedelta

from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_user, get_active_checkin, get_spots, get_checkins_for_user, get_favorite_spots, add_favorite_spot, remove_favorite_spot, get_spot_by_id
from keyboards import get_main_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
profile_router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class ProfileState(StatesGroup):
    managing_favorites = State()

# –ë–ª–æ–∫ 1: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def create_favorite_spots_keyboard(user_id: int, spots: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ø–æ—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º."""
    keyboard = []
    favorite_spots = await get_favorite_spots(user_id)
    favorite_spot_ids = set(favorite_spots)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ä–∞–±–æ—Ç–∞–µ–º —Å —Å–ø–∏—Å–∫–æ–º int

    for spot in spots:
        spot_id = spot["id"]
        if spot_id in favorite_spot_ids:
            button_text = f"{spot['name']} (—É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ)"
            callback_data = f"remove_favorite_{spot_id}"
        else:
            button_text = f"{spot['name']} (–¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ)"
            callback_data = f"add_favorite_{spot_id}"
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ë–ª–æ–∫ 2: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@profile_router.callback_query(F.data == "profile")
async def show_profile(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await get_user(user_id)
    if not user:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /start.")
        await callback.answer()
        return

    checkins = await get_checkins_for_user(user_id)
    total_time_hours = sum(checkin["duration_hours"] or 0 for checkin in checkins)

    active_checkin = await get_active_checkin(user_id)
    active_spot_text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞."
    if active_checkin:
        spot = await get_spot_by_id(active_checkin["spot_id"])
        active_spot_text = f"–í—ã —Å–µ–π—á–∞—Å –Ω–∞ —Å–ø–æ—Ç–µ: {spot['name']}"

    profile_text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['first_name']}:\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ —á–µ–∫-–∏–Ω–æ–≤: {len(checkins)}\n"
        f"–û–±—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–ø–æ—Ç–∞—Ö: {total_time_hours:.1f} —á–∞—Å–æ–≤\n\n"
        f"üìç –¢–µ–∫—É—â–∏–π —Å–ø–æ—Ç:\n{active_spot_text}\n\n"
        f"‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ø–æ—Ç–∞–º–∏:"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚≠ê –£–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ø–æ—Ç–∞–º–∏", callback_data="manage_favorites")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    await callback.message.edit_text(profile_text, reply_markup=keyboard)
    await callback.answer()

@profile_router.callback_query(F.data == "manage_favorites")
async def manage_favorite_spots(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    spots = await get_spots() or []

    if not spots:
        await callback.message.edit_text("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç —Å–ø–æ—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")]
            ]
        )
        await callback.message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å:", reply_markup=keyboard)
        await state.clear()
        await callback.answer()
        return

    keyboard = await create_favorite_spots_keyboard(user_id, spots)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º:", reply_markup=keyboard)
    await state.set_state(ProfileState.managing_favorites)
    await callback.answer()

@profile_router.callback_query(F.data.startswith("add_favorite_"))
async def add_favorite_spot_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    spot_id = int(callback.data.split("_")[-1])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    try:
        await add_favorite_spot(user_id, spot_id)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª —Å–ø–æ—Ç ID {spot_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        return

    spots = await get_spots() or []
    keyboard = await create_favorite_spots_keyboard(user_id, spots)
    await callback.message.edit_text("–°–ø–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Ç –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å:", reply_markup=keyboard)
    await callback.answer()

@profile_router.callback_query(F.data.startswith("remove_favorite_"))
async def remove_favorite_spot_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    spot_id = int(callback.data.split("_")[-1])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    try:
        await remove_favorite_spot(user_id, spot_id)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª —Å–ø–æ—Ç ID {spot_id} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        return

    spots = await get_spots() or []
    keyboard = await create_favorite_spots_keyboard(user_id, spots)
    await callback.message.edit_text("–°–ø–æ—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Ç –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å:", reply_markup=keyboard)
    await callback.answer()

@profile_router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º."""
    user_id = callback.from_user.id
    user = await get_user(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º await
    if not user:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /start.")
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ–∫-–∏–Ω–æ–≤
    checkins = await get_checkins_for_user(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º await
    total_time_hours = 0
    for checkin in checkins:
        if checkin["duration_hours"]:
            total_time_hours += checkin["duration_hours"]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Ç
    active_checkin = await get_active_checkin(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º await
    active_spot_text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞."
    if active_checkin:
        spot = await get_spot_by_id(active_checkin["spot_id"])  # –î–æ–±–∞–≤–ª—è–µ–º await
        active_spot_text = f"–í—ã —Å–µ–π—á–∞—Å –Ω–∞ —Å–ø–æ—Ç–µ: {spot['name']}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['first_name']}:\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ —á–µ–∫-–∏–Ω–æ–≤: {len(checkins)}\n"
        f"–û–±—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–ø–æ—Ç–∞—Ö: {total_time_hours:.1f} —á–∞—Å–æ–≤\n\n"
        f"üìç –¢–µ–∫—É—â–∏–π —Å–ø–æ—Ç:\n{active_spot_text}\n\n"
        f"‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ø–æ—Ç–∞–º–∏:"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚≠ê –£–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ø–æ—Ç–∞–º–∏", callback_data="manage_favorites")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    await callback.message.edit_text(profile_text, reply_markup=keyboard)
    await state.clear()
    await callback.answer()

@profile_router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = callback.from_user.id
    await callback.message.delete()
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard(user_id))
    await state.clear()
    await callback.answer()