import logging
import math
from datetime import datetime, timedelta
from timezonefinder import TimezoneFinder
import pytz

from aiogram import Router, types, F, Bot
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_spots, get_spot_by_id, get_active_checkin, get_checkins_for_spot, checkin_user, get_user, add_or_update_user
from services.weather import get_open_meteo_forecast as get_windy_forecast, wind_direction_to_text
from keyboards import (
    create_location_request_keyboard,
    create_back_to_menu_keyboard,
    create_nearby_spots_keyboard,
    create_arrival_time_keyboard,
    create_confirm_arrival_keyboard,
)
from .checkin import CheckinState  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CheckinState

logging.basicConfig(level=logging.INFO)
spots_router = Router()

class NearbySpotsState(StatesGroup):
    waiting_for_location = State()
    # setting_arrival_time –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º CheckinState.setting_arrival_time

def haversine_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –ó–µ–º–ª–µ (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö) —Å –ø–æ–º–æ—â—å—é —Ñ–æ—Ä–º—É–ª—ã –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞."""
    R = 6371
    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2
    c = 2 * math.asin(math.sqrt(a))
    return R * c

tf = TimezoneFinder()

@spots_router.callback_query(F.data == "nearby_spots")
async def request_location_for_nearby_spots(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ø–æ—Ç–æ–≤."""
    keyboard = create_location_request_keyboard()
    await callback.message.edit_text("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–ø–æ—Ç—ã:")
    await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)
    await state.set_state(NearbySpotsState.waiting_for_location)
    await callback.answer()

@spots_router.message(NearbySpotsState.waiting_for_location, F.location)
async def process_location_for_nearby_spots(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 —Å–ø–æ—Ç–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —á–µ–∫-–∏–Ω–∞–º–∏."""
    user_id = message.from_user.id
    user_lat = message.location.latitude
    user_lon = message.location.longitude

    timezone_name = tf.timezone_at(lat=user_lat, lng=user_lon) or "UTC"
    user_timezone = pytz.timezone(timezone_name)

    user = await get_user(user_id)
    await add_or_update_user(
        user_id=user_id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        username=message.from_user.username,
        timezone=timezone_name
    )

    spots = await get_spots() or []
    if not spots:
        await message.answer("‚ùå –ü–æ—Ö–æ–∂–µ, –≤ –±–∞–∑–µ –Ω–µ—Ç —Å–ø–æ—Ç–æ–≤.", reply_markup=ReplyKeyboardRemove())
        keyboard = create_back_to_menu_keyboard()
        await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=keyboard)
        await state.clear()
        return

    active_spots = []
    for spot in spots:
        active_count, active_users, arriving_users = await get_checkins_for_spot(spot["id"])
        if active_count > 0 or len(arriving_users) > 0:
            distance = haversine_distance(user_lat, user_lon, spot["lat"], spot["lon"])
            active_spots.append((spot, distance))

    nearest_active_spots = sorted(active_spots, key=lambda x: x[1])[:5]

    if not nearest_active_spots:
        await message.answer(
            "üå¨Ô∏èüö´üîç –ù–∞ —Å–ø–æ—Ç–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!\n"
            "üöóüìçü§î –°–æ–±—Ä–∞–ª—Å—è –∏–ª–∏ –ø—Ä–∏–µ—Ö–∞–ª –Ω–∞ —Å–ø–æ—Ç –∏ —Ä–µ—à–∏–ª –æ—Å—Ç–∞—Ç—å—Å—è?\n"
            "üì¢üìçü§ô –î–∞–π –∑–Ω–∞—Ç—å ‚Äî –æ—Ç–º–µ—Ç—å —Å–µ–±—è –Ω–∞ —Å–ø–æ—Ç–µ!\n"
            "üåçüë•üå™Ô∏èü™Å –í—Å–µ –±—É–¥—É—Ç –∑–Ω–∞—Ç—å, –≥–¥–µ —Å–µ–≥–æ–¥–Ω—è –≤–∫–∞—Ç—ã–≤–∞—é—Ç.",
            reply_markup=ReplyKeyboardRemove()
        )
        keyboard = create_back_to_menu_keyboard()
        await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=keyboard)
        await state.clear()
        return

    response = "üîç **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ç—ã:**\n\n"
    for spot, distance in nearest_active_spots:
        active_count, active_users, arriving_users = await get_checkins_for_spot(spot["id"])
        on_spot_names = ", ".join(user["first_name"] for user in active_users) if active_users else "–Ω–∏–∫–æ–≥–æ"

        arriving_info = "–Ω–µ—Ç"
        if arriving_users:
            arriving_info_list = []
            for user in arriving_users:
                arrival_time_str = user["arrival_time"]
                if "T" not in arrival_time_str:
                    arrival_time_str = f"{datetime.utcnow().date()}T{arrival_time_str}+00:00"
                utc_time = datetime.fromisoformat(arrival_time_str.replace("Z", "+00:00"))
                local_time = utc_time.replace(tzinfo=pytz.utc).astimezone(user_timezone)
                arriving_info_list.append(f"{user['first_name']} ({local_time.strftime('%H:%M')})")
            arriving_info = ", ".join(arriving_info_list)

        wind_data = await get_windy_forecast(spot["lat"], spot["lon"])
        wind_info = "üå¨ *–í–µ—Ç–µ—Ä:* –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        temp_info = "üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        if wind_data:
            wind_speed = wind_data["speed"]
            wind_direction = wind_data["direction"]
            wind_gusts = wind_data.get("gusts")
            direction_text = wind_direction_to_text(wind_direction)
            wind_info = f"üå¨ *–í–µ—Ç–µ—Ä:* {wind_speed:.1f} –º/—Å, {direction_text} ({wind_direction:.0f}¬∞)"
            if wind_gusts is not None:
                wind_info += f", –ø–æ—Ä—ã–≤—ã –¥–æ {wind_gusts:.1f} –º/—Å"
            if "water_temperature" in wind_data and wind_data["water_temperature"] is not None:
                temp_info = f"üå° *–í–æ–¥–∞:* {wind_data['water_temperature']:.1f} ¬∞C"

        response += (
            f"üèÑ‚Äç‚ôÇÔ∏è **{spot['name']}**\n"
            f"üìç *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {distance:.2f} –∫–º\n"
            f"{wind_info}\n"
            f"{temp_info}\n"
            f"üë• *–ù–∞ –º–µ—Å—Ç–µ:* {active_count} —á–µ–ª. ({on_spot_names})\n"
            f"‚è≥ *–ü—Ä–∏–µ–¥—É—Ç:* {len(arriving_users)} —á–µ–ª. ({arriving_info})\n\n"
        )

    keyboard = create_nearby_spots_keyboard(nearest_active_spots)
    await message.answer(response, parse_mode="Markdown", reply_markup=ReplyKeyboardRemove())
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.clear()

@spots_router.message(NearbySpotsState.waiting_for_location)
async def handle_invalid_location_for_nearby_spots(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'.")
    keyboard = create_location_request_keyboard()
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)

@spots_router.callback_query(F.data.startswith("arrival_"), CheckinState.setting_arrival_time)
async def process_arrival_time(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–µ–∫-–∏–Ω."""
    arrival_str = callback.data.split("_")[1]
    now = datetime.utcnow().replace(tzinfo=pytz.utc)

    if arrival_str in ["1", "2", "3"]:
        arrival_time = (now + timedelta(hours=int(arrival_str))).isoformat()
    else:
        try:
            target_hour, target_minute = map(int, arrival_str.split(":"))
        except ValueError:
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21:47).")
            return

        target_time = datetime(
            year=now.year,
            month=now.month,
            day=now.day,
            hour=target_hour,
            minute=target_minute,
            tzinfo=pytz.utc
        ).replace(tzinfo=pytz.utc)
        if target_time < now:
            target_time += timedelta(days=1)
        arrival_time = target_time.isoformat()

    data = await state.get_data()
    spot_id = data["spot_id"]
    user_id = callback.from_user.id

    await checkin_user(user_id, spot_id, checkin_type=2, arrival_time=arrival_time)
    spot = await get_spot_by_id(spot_id)
    await callback.message.edit_text(f"‚úÖ –í—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–µ–∑–¥ –Ω–∞ —Å–ø–æ—Ç '{spot['name']}'! üåä")

    keyboard = create_confirm_arrival_keyboard()
    await callback.message.answer("–ö–æ–≥–¥–∞ –ø—Ä–∏–µ–¥–µ—Ç–µ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–±—ã—Ç–∏–µ:", reply_markup=keyboard)
    await state.clear()
    await callback.answer()

@spots_router.callback_query(F.data == "cancel_checkin", CheckinState.setting_arrival_time)
async def cancel_checkin(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–µ–∑–¥–∞."""
    await callback.message.edit_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–µ–∑–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    keyboard = create_back_to_menu_keyboard()
    await callback.message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=keyboard)
    await state.clear()
    await callback.answer()