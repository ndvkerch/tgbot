import logging
import math
from datetime import datetime, timedelta

from aiogram import Router, types, F, Bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_spots, get_spot_by_id, get_active_checkin, get_checkins_for_spot, checkin_user
from services.weather import get_windy_forecast, wind_direction_to_text

logging.basicConfig(level=logging.INFO)
spots_router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class NearbySpotsState(StatesGroup):
    waiting_for_location = State()
    setting_arrival_time = State()  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
def haversine_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –ó–µ–º–ª–µ (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö) —Å –ø–æ–º–æ—â—å—é —Ñ–æ—Ä–º—É–ª—ã –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞."""
    R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2
    c = 2 * math.asin(math.sqrt(a))
    return R * c

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
def create_arrival_time_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 1 —á–∞—Å", callback_data="arrival_1"),
         InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞", callback_data="arrival_2"),
         InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞", callback_data="arrival_3")],
        [InlineKeyboardButton(text="–í 12:00", callback_data="arrival_12:00"),
         InlineKeyboardButton(text="–í 15:00", callback_data="arrival_15:00"),
         InlineKeyboardButton(text="–í 18:00", callback_data="arrival_18:00")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_checkin")]
    ])
    return keyboard

# –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ø–æ—Ç–æ–≤
@spots_router.callback_query(F.data == "nearby_spots")
async def request_location_for_nearby_spots(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ø–æ—Ç–æ–≤."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.edit_text("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–ø–æ—Ç—ã:")
    await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)
    await state.set_state(NearbySpotsState.waiting_for_location)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ø–æ—Ç–æ–≤
@spots_router.message(NearbySpotsState.waiting_for_location, F.location)
async def process_location_for_nearby_spots(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 5 –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ø–æ—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–µ—Ç—Ä–µ."""
    user_lat = message.location.latitude
    user_lon = message.location.longitude
    spots = await get_spots() or []  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Ç–æ–≤

    if not spots:
        await message.answer("‚ùå –ü–æ—Ö–æ–∂–µ, –≤ –±–∞–∑–µ –Ω–µ—Ç —Å–ø–æ—Ç–æ–≤.", ReplyKeyboardRemove())
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        )
        await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=keyboard)
        await state.clear()
        return

    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –≤—Å–µ—Ö —Å–ø–æ—Ç–æ–≤
    distances = [
        (spot, haversine_distance(user_lat, user_lon, spot["lat"], spot["lon"]))
        for spot in spots
    ]
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –±–µ—Ä—ë–º 5 –±–ª–∏–∂–∞–π—à–∏—Ö
    nearest_spots = sorted(distances, key=lambda x: x[1])[:5]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    response = "üîç **–ë–ª–∏–∂–∞–π—à–∏–µ —Å–ø–æ—Ç—ã:**\n\n"
    for spot, distance in nearest_spots:
        on_spot_count, on_spot_users, arriving_users = await get_checkins_for_spot(spot["id"])
        on_spot_names = ", ".join(user["first_name"] for user in on_spot_users) if on_spot_users else "–Ω–∏–∫–æ–≥–æ"
        arriving_info = ", ".join(f"{user['first_name']} ({user['arrival_time']})" for user in arriving_users) if arriving_users else "–Ω–µ—Ç"

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ç—Ä–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–æ—Ç–∞
        wind_data = await get_windy_forecast(spot["lat"], spot["lon"])
        wind_info = "üå¨ *–í–µ—Ç–µ—Ä:* –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        if wind_data:
            wind_speed = wind_data["speed"]
            wind_direction = wind_data["direction"]
            direction_text = wind_direction_to_text(wind_direction)
            wind_info = f"üå¨ *–í–µ—Ç–µ—Ä:* {wind_speed:.1f} –º/—Å, {direction_text} ({wind_direction:.0f}¬∞)"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Ç–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        response += (
            f"üèÑ‚Äç‚ôÇÔ∏è **{spot['name']}**\n"
            f"üìç *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {distance:.2f} –∫–º\n"
            f"{wind_info}\n"
            f"üë• *–ù–∞ –º–µ—Å—Ç–µ:* {on_spot_count} —á–µ–ª. ({on_spot_names})\n"
            f"‚è≥ *–ü—Ä–∏–µ–¥—É—Ç:* {len(arriving_users)} —á–µ–ª. ({arriving_info})\n\n"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üèÑ‚Äç‚ôÇÔ∏è –°–æ–±–∏—Ä–∞—é—Å—å –Ω–∞ {spot['name']}", callback_data=f"plan_to_arrive_{spot['id']}")]
            for spot, distance in nearest_spots
        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
    )

    await message.answer(response, parse_mode="Markdown", reply_markup=ReplyKeyboardRemove())
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤–º–µ—Å—Ç–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@spots_router.message(NearbySpotsState.waiting_for_location)
async def handle_invalid_location_for_nearby_spots(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'.")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ–±–∏—Ä–∞—é—Å—å –Ω–∞ —Å–ø–æ—Ç"
@spots_router.callback_query(F.data.startswith("plan_to_arrive_"))
async def plan_to_arrive(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Ç–∞."""
    spot_id = int(callback.data.split("_")[-1])
    spot = await get_spot_by_id(spot_id)
    if not spot:
        await callback.message.answer("‚ùå –°–ø–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–ø–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(spot_id=spot_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Ç: {spot['name']}\n–ö–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å?")
    keyboard = create_arrival_time_keyboard()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:", reply_markup=keyboard)
    await state.set_state(NearbySpotsState.setting_arrival_time)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
@spots_router.callback_query(F.data.startswith("arrival_"), NearbySpotsState.setting_arrival_time)
async def process_arrival_time(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–µ–∫-–∏–Ω."""
    arrival_str = callback.data.split("_")[1]
    now = datetime.utcnow()

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
    if arrival_str in ["1", "2", "3"]:
        arrival_time = (now + timedelta(hours=int(arrival_str))).isoformat()
    else:
        target_hour = int(arrival_str.split(":")[0])
        target_time = now.replace(hour=target_hour, minute=0, second=0, microsecond=0)
        if target_time < now:
            target_time += timedelta(days=1)
        arrival_time = target_time.isoformat()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    spot_id = data["spot_id"]
    user_id = callback.from_user.id

    # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ–∫-–∏–Ω —Å —Ç–∏–ø–æ–º "–ü–ª–∞–Ω–∏—Ä—É—é –ø—Ä–∏–µ—Ö–∞—Ç—å"
    await checkin_user(user_id, spot_id, checkin_type=2, bot=bot, arrival_time=arrival_time)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Ç–µ
    spot = await get_spot_by_id(spot_id)
    await callback.message.edit_text(f"‚úÖ –í—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–µ–∑–¥ –Ω–∞ —Å–ø–æ—Ç '{spot['name']}'! üåä")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–Ø –ø—Ä–∏–µ—Ö–∞–ª!", callback_data="confirm_arrival")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    await callback.message.answer("–ö–æ–≥–¥–∞ –ø—Ä–∏–µ–¥–µ—Ç–µ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–±—ã—Ç–∏–µ:", reply_markup=keyboard)
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@spots_router.callback_query(F.data == "cancel_checkin", NearbySpotsState.setting_arrival_time)
async def cancel_checkin(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–µ–∑–¥–∞."""
    await callback.message.edit_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–µ–∑–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    await callback.message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=keyboard)
    await state.clear()
    await callback.answer()