import logging
import math
from datetime import datetime
from timezonefinder import TimezoneFinder
import pytz

from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_spots, get_spot_by_id, get_checkins_for_spot
from services.weather import get_windy_forecast, wind_direction_to_text

logging.basicConfig(level=logging.INFO)
weather_router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class WeatherSpotsState(StatesGroup):
    waiting_for_location = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
def haversine_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –ó–µ–º–ª–µ (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö)."""
    R = 6371
    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2
    c = 2 * math.asin(math.sqrt(a))
    return R * c

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TimezoneFinder
tf = TimezoneFinder()

@weather_router.callback_query(F.data == "weather_nearby_spots")
async def request_location_for_weather_spots(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ø–æ—Ç–æ–≤."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.edit_text("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ø–æ—Ç–∞—Ö:")
    await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)
    await state.set_state(WeatherSpotsState.waiting_for_location)
    await callback.answer()

@weather_router.message(WeatherSpotsState.waiting_for_location, F.location)
async def process_location_for_weather_spots(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 5 –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ø–æ—Ç–æ–≤ —Å –ø–æ–≥–æ–¥–æ–π."""
    user_lat = message.location.latitude
    user_lon = message.location.longitude

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    timezone_name = tf.timezone_at(lat=user_lat, lng=user_lon) or "UTC"
    user_timezone = pytz.timezone(timezone_name)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ø–æ—Ç—ã
    spots = await get_spots() or []
    if not spots:
        await message.answer("‚ùå –ü–æ—Ö–æ–∂–µ, –≤ –±–∞–∑–µ –Ω–µ—Ç —Å–ø–æ—Ç–æ–≤.", reply_markup=ReplyKeyboardRemove())
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]])
        await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=keyboard)
        await state.clear()
        return

    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –≤—Å–µ—Ö —Å–ø–æ—Ç–æ–≤
    distances = [
        (spot, haversine_distance(user_lat, user_lon, spot["lat"], spot["lon"]))
        for spot in spots
    ]
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –±–µ—Ä—ë–º 5 –±–ª–∏–∂–∞–π—à–∏—Ö
    nearest_spots = sorted(distances, key=lambda x: x[1])[:5]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "üå§Ô∏è **–ë–ª–∏–∂–∞–π—à–∏–µ —Å–ø–æ—Ç—ã:**\n\n"
    for spot, distance in nearest_spots:
        on_spot_count, on_spot_users, arriving_users = await get_checkins_for_spot(spot["id"])
        on_spot_names = ", ".join(user["first_name"] for user in on_spot_users) if on_spot_users else "–Ω–∏–∫–æ–≥–æ"

        arriving_info = "–Ω–µ—Ç"
        if arriving_users:
            arriving_info_list = []
            for user in arriving_users:
                arrival_time_str = user["arrival_time"]
                if "T" not in arrival_time_str:
                    arrival_time_str = f"{datetime.utcnow().date()}T{arrival_time_str}+00:00"
                utc_time = datetime.fromisoformat(arrival_time_str.replace("Z", "+00:00"))
                local_time = utc_time.replace(tzinfo=pytz.utc).astimezone(user_timezone)
                arriving_info_list.append(f"{user['first_name']} ({local_time.strftime('%H:%M')})")
            arriving_info = ", ".join(arriving_info_list)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ç—Ä–µ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –≤–æ–¥—ã
        wind_data = await get_windy_forecast(spot["lat"], spot["lon"])
        wind_info = "üå¨ *–í–µ—Ç–µ—Ä:* –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        water_info = "üíß *–í–æ–¥–∞:* –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        if wind_data:
            wind_speed = wind_data["speed"]
            wind_direction = wind_data["direction"]
            direction_text = wind_direction_to_text(wind_direction)
            wind_info = f"üå¨ *–í–µ—Ç–µ—Ä:* {wind_speed:.1f} –º/—Å, {direction_text} ({wind_direction:.0f}¬∞)"
            if "water_temperature" in wind_data and wind_data["water_temperature"] is not None:
                water_info = f"üíß *–í–æ–¥–∞:* {wind_data['water_temperature']:.1f} ¬∞C"

        response += (
            f"üèÑ‚Äç‚ôÇÔ∏è **{spot['name']}**\n"
            f"üìç *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {distance:.2f} –∫–º\n"
            f"{wind_info}\n"
            f"{water_info}\n"
            f"üë• *–ù–∞ –º–µ—Å—Ç–µ:* {on_spot_count} —á–µ–ª. ({on_spot_names})\n"
            f"‚è≥ *–ü—Ä–∏–µ–¥—É—Ç:* {len(arriving_users)} —á–µ–ª. ({arriving_info})\n\n"
        )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üèÑ‚Äç‚ôÇÔ∏è –°–æ–±–∏—Ä–∞—é—Å—å –Ω–∞ {spot['name']}", callback_data=f"plan_to_arrive_{spot['id']}")]
            for spot, distance in nearest_spots
        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
    )

    await message.answer(response, parse_mode="Markdown", reply_markup=ReplyKeyboardRemove())
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.clear()

@weather_router.message(WeatherSpotsState.waiting_for_location)
async def handle_invalid_location_for_weather_spots(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'.")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)