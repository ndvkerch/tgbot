import logging
from datetime import datetime, timedelta
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram import Bot
from typing import Dict, Tuple, Optional

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_id: (lat, lon, timestamp)}
geo_cache: Dict[int, Tuple[float, float, datetime]] = {}

class GeoService:
    def __init__(self, bot: Bot):
        self.bot = bot

    async def get_user_location(
        self, 
        message: Message, 
        cache_timeout: int = 600  # 10 –º–∏–Ω—É—Ç
    ) -> Optional[Tuple[float, float]]:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
        if user_id in geo_cache:
            lat, lon, timestamp = geo_cache[user_id]
            if (datetime.now() - timestamp).total_seconds() < cache_timeout:
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {user_id}")
                return (lat, lon)

        # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=keyboard)
        return None

    def update_cache(self, user_id: int, lat: float, lon: float) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö."""
        geo_cache[user_id] = (lat, lon, datetime.now())
        logger.info(f"–ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    @staticmethod
    def calculate_distance(
        lat1: float, 
        lon1: float, 
        lat2: float, 
        lon2: float
    ) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (–≤ –∫–º)."""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª—ã –•–∞–≤–µ—Ä—Å–∏–Ω–∞
        from math import radians, sin, cos, sqrt, atan2
        R = 6371.0  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏

        lat1, lon1 = radians(lat1), radians(lon1)
        lat2, lon2 = radians(lat2), radians(lon2)

        dlat = lat2 - lat1
        dlon = lon2 - lon1

        a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
        c = 2 * atan2(sqrt(a), sqrt(1-a))

        return R * c

    async def get_nearest_spots(
        self,
        user_lat: float,
        user_lon: float,
        max_distance: float = 5.0  # –ú–∞–∫—Å. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
    ) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ø–æ—Ç–æ–≤."""
        from database import get_spots  # –ò–º–ø–æ—Ä—Ç —Å —É—á–µ—Ç–æ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

        spots = await get_spots()
        nearest = []

        for spot in spots:
            distance = self.calculate_distance(
                user_lat, user_lon,
                spot["lat"], spot["lon"]
            )
            if distance <= max_distance:
                nearest.append((spot, distance))

        return sorted(nearest, key=lambda x: x[1])